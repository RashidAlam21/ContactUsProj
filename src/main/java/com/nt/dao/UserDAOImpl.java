/**
 * 
 */
package com.nt.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.nt.domain.User;
import com.nt.rm.UserRowMapper;

/**
 * @author abc
 *
 */
@Repository
public class UserDAOImpl extends BaseDAO implements UserDAO {
	private static final Logger logger=Logger.getLogger(UserDAOImpl.class);
	public int save(User user) {
		String sql = "INSERT INTO USER(userid,name,phone,email,address,loginname,password,role,loginstatus)"
				+ " VALUES(:userid,:name,:phone,:email,:address,:login_name,:password,:role,:login_status)";
		Map map = new HashMap();
		// map.put("user_id",user.getUserId());
		map.put("userid", user.getUserId());
		map.put("name", user.getName());
		map.put("phone", user.getPhone());
		map.put("email", user.getEmail());
		map.put("address", user.getAddress());
		map.put("login_name", user.getLoginName());
		map.put("password", user.getPassword());
		map.put("role", user.getRole());
		map.put("login_status", user.getLoginStatus());
		KeyHolder kh = new GeneratedKeyHolder();// KeyHolder Obj will bind the value which is auto incrimented and
												// generated by database...
		SqlParameterSource ps = new MapSqlParameterSource(map);// Source of the value from NamedParameter....
		Integer in = getNamedParameterJdbcTemplate().update(sql, ps, kh);
		Integer userId = kh.getKey().intValue();
		user.setUserId(userId);
		logger.info("Result Save Operation:: "+in);
		System.out.println(in);
		return in;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.nt.dao.UserDAO#update(com.nt.domain.User)
	 */
	public int update(User user) {
		String sql = "UPDATE USER SET " + "name=:name," + "phone=:phone," + "email=:email," + "address=:address,"
				+ "role=:role," + "loginstatus=:loginstatus" + " where userid=:userid";

		Map map = new HashMap();
		// map.put("user_id",user.getUserId());
		map.put("name", user.getName());
		map.put("phone", user.getPhone());
		map.put("email", user.getEmail());
		map.put("address", user.getAddress());
		map.put("role", user.getRole());
		map.put("loginstatus", user.getLoginStatus());
		map.put("userid", user.getUserId());
		SqlParameterSource ps = new MapSqlParameterSource(map);// Source of the value from NamedParameter....
		Integer in = getNamedParameterJdbcTemplate().update(sql, ps);// Source of the value from NamedParameter....
		logger.info("Result update Operation:: "+in);
		System.out.println(in);
		return in;

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.nt.dao.UserDAO#delete(com.nt.domain.User)
	 */
	public int delete(User user) {
		return this.delete(user.getUserId());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.nt.dao.UserDAO#deleteById(java.lang.Integer)
	 */
	public int delete(Integer userId) {
		String sql = "delete from user where userid=?";
		return getJdbcTemplate().update(sql, userId);

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.nt.dao.UserDAO#findById(java.lang.Integer)
	 */
	public User findById(Integer userId) {
		String sql = "SELECT USERID,NAME,PHONE,EMAIL,ADDRESS,LOGINNAME,ROLE,LOGINSTATUS FROM USER"
				+ " WHERE USERID = ?";
		User user = getJdbcTemplate().queryForObject(sql, new UserRowMapper(), userId);
		logger.info("User Details by UserId Operation:: "+user);
		return user;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.nt.dao.UserDAO#findAll()
	 */
	public List<User> findAll() {
		String sql = "SELECT USERID,NAME,PHONE,EMAIL,ADDRESS,LOGINNAME,ROLE,LOGINSTATUS FROM USER";
		List<User> user = getJdbcTemplate().query(sql, new UserRowMapper());
		logger.info("User Details Operation:: "+user);
		return user;

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.nt.dao.UserDAO#findProperty(java.lang.String, java.lang.Object)
	 */
	public List<User> findProperty(String propName, Object propValue) {
		String sql = "SELECT USERID,NAME,PHONE,EMAIL,ADDRESS,LOGINNAME,password,ROLE,LOGINSTATUS FROM USER where "+ propName+ "=?";
		List<User> user = getJdbcTemplate().query(sql, new UserRowMapper(),propValue);
		logger.info("User Details By propName & propValue "+user);
		return user;
	}

}
	